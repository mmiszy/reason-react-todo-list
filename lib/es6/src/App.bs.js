// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as $$String from "bs-platform/lib/es6/string.js";
import * as Belt_List from "bs-platform/lib/es6/belt_List.js";
import * as Pervasives from "bs-platform/lib/es6/pervasives.js";
import * as ReasonReact from "reason-react/lib/es6/src/ReasonReact.js";
import * as Storage$ReactTemplate from "./storage.bs.js";
import * as TodoList$ReactTemplate from "./TodoList.bs.js";

var saveTodos = Storage$ReactTemplate.saveTodos;

function reducer(action, state) {
  if (typeof action === "number") {
    switch (action) {
      case 0 : 
          var title = $$String.trim(state[/* currentText */1]);
          if (title === "") {
            return /* NoUpdate */0;
          } else {
            var newTodo_000 = /* id */new Date().toISOString();
            var newTodo = /* record */[
              newTodo_000,
              /* title */title,
              /* completed */false
            ];
            var todos = Pervasives.$at(/* :: */[
                  newTodo,
                  /* [] */0
                ], state[/* todos */0]);
            return /* UpdateWithSideEffects */Block.__(3, [
                      /* record */[
                        /* todos */todos,
                        /* currentText */""
                      ],
                      (function (self) {
                          return Storage$ReactTemplate.saveTodos(self[/* state */2][/* todos */0]);
                        })
                    ]);
          }
      case 1 : 
          return /* Update */Block.__(0, [/* record */[
                      /* todos */state[/* todos */0],
                      /* currentText */""
                    ]]);
      case 2 : 
          return /* UpdateWithSideEffects */Block.__(3, [
                    /* record */[
                      /* todos : [] */0,
                      /* currentText */state[/* currentText */1]
                    ],
                    (function (self) {
                        return Storage$ReactTemplate.saveTodos(self[/* state */2][/* todos */0]);
                      })
                  ]);
      
    }
  } else if (action.tag) {
    var todoToToggle = action[0];
    var __x = state[/* todos */0];
    var todos$1 = Belt_List.map(__x, (function (todo) {
            var match = todo[/* id */0] === todoToToggle[/* id */0];
            if (match) {
              return /* record */[
                      /* id */todo[/* id */0],
                      /* title */todo[/* title */1],
                      /* completed */!todo[/* completed */2]
                    ];
            } else {
              return todo;
            }
          }));
    return /* UpdateWithSideEffects */Block.__(3, [
              /* record */[
                /* todos */todos$1,
                /* currentText */state[/* currentText */1]
              ],
              (function (self) {
                  return Storage$ReactTemplate.saveTodos(self[/* state */2][/* todos */0]);
                })
            ]);
  } else {
    return /* Update */Block.__(0, [/* record */[
                /* todos */state[/* todos */0],
                /* currentText */action[0]
              ]]);
  }
}

function initialState() {
  return /* record */[
          /* todos */Storage$ReactTemplate.loadTodos(/* () */0),
          /* currentText */""
        ];
}

function onInputChange(param, e) {
  return Curry._1(param[/* send */4], /* ChangeText */Block.__(0, [e.target.value]));
}

function onInputKeyDown(param, e) {
  var send = param[/* send */4];
  var key = e.key;
  switch (key) {
    case "Enter" : 
        e.preventDefault();
        return Curry._1(send, /* AddNewTodo */0);
    case "Escape" : 
        e.preventDefault();
        return Curry._1(send, /* CancelNewTodo */1);
    default:
      return /* () */0;
  }
}

function onTodoToggle(param, todo) {
  return Curry._1(param[/* send */4], /* ToggleTodo */Block.__(1, [todo]));
}

function onRemoveAllClick(param, _) {
  return Curry._1(param[/* send */4], /* DeleteAll */2);
}

var component = ReasonReact.reducerComponent("App");

function make() {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              return React.createElement("div", undefined, React.createElement("input", {
                              value: self[/* state */2][/* currentText */1],
                              onKeyDown: (function (param) {
                                  return onInputKeyDown(self, param);
                                }),
                              onChange: (function (param) {
                                  return onInputChange(self, param);
                                })
                            }), ReasonReact.element(/* None */0, /* None */0, TodoList$ReactTemplate.make(self[/* state */2][/* todos */0], (function (param) {
                                    return onTodoToggle(self, param);
                                  }), (function (param) {
                                    return onRemoveAllClick(self, param);
                                  }), /* array */[])));
            }),
          /* initialState */initialState,
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */reducer,
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

export {
  saveTodos ,
  reducer ,
  initialState ,
  onInputChange ,
  onInputKeyDown ,
  onTodoToggle ,
  onRemoveAllClick ,
  component ,
  make ,
  
}
/* component Not a pure module */
